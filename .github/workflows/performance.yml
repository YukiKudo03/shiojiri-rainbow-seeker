name: Performance Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run performance tests weekly on Sunday at 3 AM UTC
    - cron: '0 3 * * 0'

jobs:
  # Backend Performance Tests
  backend-performance:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Start backend server
        run: |
          cd backend
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 3000
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          JWT_SECRET: test-secret
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Install Artillery
        run: npm install -g artillery

      - name: Create performance test config
        run: |
          cat > artillery-config.yml << 'EOF'
          config:
            target: 'http://localhost:3000'
            phases:
              - duration: 60
                arrivalRate: 10
                name: "Warm up"
              - duration: 120
                arrivalRate: 50
                name: "Load test"
              - duration: 60
                arrivalRate: 100
                name: "Stress test"
          scenarios:
            - name: "API endpoints"
              weight: 100
              flow:
                - get:
                    url: "/health"
                - post:
                    url: "/api/auth/login"
                    json:
                      email: "test@example.com"
                      password: "password123"
                - get:
                    url: "/api/rainbow"
                - get:
                    url: "/api/weather/current"
          EOF

      - name: Run performance tests
        run: |
          artillery run artillery-config.yml --output performance-report.json

      - name: Generate performance report
        run: |
          artillery report performance-report.json --output performance-report.html

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: backend-performance-report
          path: |
            performance-report.json
            performance-report.html

  # Frontend Performance Tests
  frontend-performance:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Serve frontend
        run: |
          cd frontend
          npx serve -s build -l 3001 &
          sleep 5

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse CI
        run: |
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Create Lighthouse config
        run: |
          cat > lighthouserc.json << 'EOF'
          {
            "ci": {
              "collect": {
                "url": ["http://localhost:3001"],
                "numberOfRuns": 3
              },
              "assert": {
                "assertions": {
                  "categories:performance": ["warn", {"minScore": 0.8}],
                  "categories:accessibility": ["error", {"minScore": 0.9}],
                  "categories:best-practices": ["warn", {"minScore": 0.9}],
                  "categories:seo": ["warn", {"minScore": 0.8}]
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOF

      - name: Run Lighthouse performance audit
        run: |
          lhci autorun --config=lighthouserc.json

  # Load Testing with K6
  load-testing:
    runs-on: ubuntu-latest
    needs: [backend-performance]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup K6
        run: |
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Create K6 test script
        run: |
          cat > k6-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export let options = {
            stages: [
              { duration: '2m', target: 100 }, // Ramp up to 100 users over 2 minutes
              { duration: '5m', target: 100 }, // Stay at 100 users for 5 minutes
              { duration: '2m', target: 200 }, // Ramp up to 200 users over 2 minutes
              { duration: '5m', target: 200 }, // Stay at 200 users for 5 minutes
              { duration: '2m', target: 0 },   // Ramp down to 0 users over 2 minutes
            ],
            thresholds: {
              'http_req_duration': ['p(95)<500'], // 95% of requests must complete below 500ms
              'http_req_failed': ['rate<0.1'],   // Error rate must be below 10%
            },
          };

          export default function () {
            // Test health endpoint
            let healthResponse = http.get('http://localhost:3000/health');
            check(healthResponse, {
              'health status is 200': (r) => r.status === 200,
            });

            // Test API endpoints
            let apiResponse = http.get('http://localhost:3000/api/rainbow');
            check(apiResponse, {
              'API status is 200 or 401': (r) => r.status === 200 || r.status === 401,
            });

            sleep(1);
          }
          EOF

      - name: Run K6 load test
        run: |
          k6 run k6-test.js --out json=k6-results.json

      - name: Upload K6 results
        uses: actions/upload-artifact@v4
        with:
          name: k6-load-test-results
          path: k6-results.json

  # Database Performance Tests
  database-performance:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup database schema
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -f backend/src/config/schema.sql

      - name: Install pgbench
        run: |
          sudo apt-get update
          sudo apt-get install postgresql-contrib

      - name: Create pgbench test data
        run: |
          cat > pgbench-test.sql << 'EOF'
          -- Insert test data for rainbow sightings
          \set user_id random(1, 1000)
          \set latitude 36.0687 + (random() - 0.5) * 0.1
          \set longitude 137.9646 + (random() - 0.5) * 0.1
          INSERT INTO rainbow_sightings (user_id, latitude, longitude, description, created_at) 
          VALUES (:user_id, :latitude, :longitude, 'Test rainbow sighting', NOW());
          EOF

      - name: Run database performance test
        run: |
          pgbench -h localhost -U postgres -d test_db -f pgbench-test.sql -c 10 -j 2 -T 60 -P 5 > pgbench-results.txt
        env:
          PGPASSWORD: postgres

      - name: Upload database performance results
        uses: actions/upload-artifact@v4
        with:
          name: database-performance-results
          path: pgbench-results.txt

  # Performance Report
  performance-report:
    runs-on: ubuntu-latest
    needs: [backend-performance, frontend-performance, load-testing, database-performance]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate performance summary
        run: |
          echo "# Performance Test Report" > performance-summary.md
          echo "## Test Results Summary" >> performance-summary.md
          echo "- Backend Performance: ${{ needs.backend-performance.result }}" >> performance-summary.md
          echo "- Frontend Performance: ${{ needs.frontend-performance.result }}" >> performance-summary.md
          echo "- Load Testing: ${{ needs.load-testing.result }}" >> performance-summary.md
          echo "- Database Performance: ${{ needs.database-performance.result }}" >> performance-summary.md
          echo "" >> performance-summary.md
          echo "Generated on: $(date)" >> performance-summary.md

      - name: Upload performance summary
        uses: actions/upload-artifact@v4
        with:
          name: performance-summary
          path: performance-summary.md

      - name: Comment PR with performance results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('performance-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ⚡ Performance Test Results\n\n${summary}`
            });

  # Notify Performance Issues
  notify-performance:
    runs-on: ubuntu-latest
    needs: [performance-report]
    if: failure()

    steps:
      - name: Notify Performance Issues
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#performance-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            ⚡ Performance Test Failed for Shiojiri Rainbow Seeker
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Please review the performance issues.