name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Dependency Vulnerability Scan
  dependency-scan:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [backend, frontend, mobile, ml-system]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (for JS components)
        if: matrix.component != 'ml-system'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Python (for ML system)
        if: matrix.component == 'ml-system'
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          cd ${{ matrix.component }}
          if [ "${{ matrix.component }}" = "ml-system" ]; then
            pip install --upgrade pip
            pip install -r requirements.txt
          else
            npm ci
          fi

      - name: Run npm audit (for JS components)
        if: matrix.component != 'ml-system'
        run: |
          cd ${{ matrix.component }}
          npm audit --audit-level=moderate || true

      - name: Run safety check (for Python)
        if: matrix.component == 'ml-system'
        run: |
          cd ${{ matrix.component }}
          pip install safety
          safety check -r requirements.txt || true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        if: matrix.component != 'ml-system'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=${{ matrix.component }}/package.json --severity-threshold=high

      - name: Run Snyk security scan (Python)
        uses: snyk/actions/python@master
        if: matrix.component == 'ml-system'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=${{ matrix.component }}/requirements.txt --severity-threshold=high

  # Container Security Scan
  container-scan:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [backend, frontend, ml-system]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t ${{ matrix.service }}:test ${{ matrix.service }}/

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.service }}:test'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.service }}-results.sarif'

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ matrix.service }}/Dockerfile
          format: sarif
          output-file: hadolint-${{ matrix.service }}-results.sarif

      - name: Upload Hadolint scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'hadolint-${{ matrix.service }}-results.sarif'

  # Static Code Analysis
  static-analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run ESLint (JavaScript)
        run: |
          cd backend
          npm ci
          npm run lint || true
          cd ../frontend
          npm ci
          npm run lint || true
          cd ../mobile
          npm ci
          npm run lint || true

      - name: Run Bandit (Python)
        run: |
          cd ml-system
          pip install bandit
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-results
          path: ml-system/bandit-report.json

  # Secrets Scan
  secrets-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Infrastructure Security Scan
  infrastructure-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,docker_compose
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'checkov-results.sarif'

  # Security Report
  security-report:
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, static-analysis, secrets-scan, infrastructure-scan]
    if: always()

    steps:
      - name: Generate Security Report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "## Scan Summary" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
          echo "- Static Analysis: ${{ needs.static-analysis.result }}" >> security-report.md
          echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-report.md
          echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-report.md
          echo "" >> security-report.md
          echo "Generated on: $(date)" >> security-report.md

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      - name: Comment PR with Security Report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ”’ Security Scan Results\n\n${report}`
            });

  # Notify Security Team
  notify-security:
    runs-on: ubuntu-latest
    needs: [security-report]
    if: failure()

    steps:
      - name: Notify Security Team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            ðŸš¨ Security Scan Failed for Shiojiri Rainbow Seeker
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Please review the security findings immediately.